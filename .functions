#!/usr/bin/env bash

function hpr {
	if [ -z "$1" ]; then
		echo "Please provide a branch name"
		return 1
	elif [ -z "$2" ]; then
		echo "Please provide a pull request title"
		return 1
	else
		githubLink=$(hub pull-request -b $1 -m $2)
		open -a "Google Chrome" $githubLink
	fi
}

function packsearch {
	if [ -z "$1" ]; then
		echo "Please provide a package name to search"
		return 1
	else
		open -a "Google Chrome" https://www.npmjs.com/package/$1
	fi
}

function clear_stash {
	if [ -z "$1" ]; then
		echo "Please provide the highest index show from 'git stash list'"
		return 1
	else
		STASHINDEX=$1
		while [ $STASHINDEX -gt -1 ]; do
			git stash drop stash@{$STASHINDEX}
			let STASHINDEX=STASHINDEX-1
		done
	fi
}

function fif {
	if [ ! "$#" -gt 1 ]; then echo "Need a string to search for!"; return 1; fi
	rg --files-with-matches --no-messages -g "!{.git,node_modules}" $1 | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 $1 || rg --ignore-case --pretty --context 10 $1 {}"
}

function port_kill {
	kill -9 $(lsof -ti tcp:$1)
}

function ws {
	code /Users/$CURR_USER/Documents/Workspaces/$1.code-workspace
}

function mkcdir {
	mkdir -p -- "$1" && cd -P -- "$1"
}

function rl {
	curl -X POST http://localhost:3333/links/ -H "Accept: application/json" -H "Content-Type: application/json" -d '{ "URL": "'"$1"'" }'
}

function rll {
	curl http://localhost:3333/links/
}

function gsb {
	header="Select a branch to switch to"
	autostash=0
	flags=
	while getopts "s" opt; do
	  case $opt in
		s)
		  autostash=1
		  flags="-s $flags"
		  ;;
	  esac
	done

	choice=$(git branch | rg -v "^\*" | tr -d ' ' | fzf \
	  --header="$header [$flags]" \
	  --prompt="Switch branch: " \
	)
	r=$?

	[[ autostash -eq 1 ]] && git stash
	[ $r = 0 ] && git switch $choice
}

function jwd {
	cd $(find ~/Code -type d -maxdepth 2 -print | fzf)
}

function o {
	if [[ $# -eq 1 ]]; then
		selected=$1
	else
		selected=$(find ~/Code -mindepth 1 -maxdepth 2 -type d | fzf)
	fi

	if [[ -z $selected ]]; then
		exit 0
	fi

	selected_name=$(basename "$selected" | tr . _)
	tmux_running=$(pgrep tmux)

	if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
		TMUX= tmux new-session -s $selected_name -c $selected
		exit 0
	fi

	if ! tmux has-session -t=$selected_name 2> /dev/null; then
		TMUX= tmux new-session -ds $selected_name -c $selected
	fi

	tmux attach -t $selected_name
}

function zettel {
	curr_time=$(ruby -e 'puts Time.now.strftime("%Y%m%d%H%M%S")')
	filename=~/Documents/Personal/obsidian/personal/slipbox/fleeting/"$curr_time"_"$1".md
	touch $filename
	nvim $filename
}

function gcam {
	if [ -z "$1" ]; then
		echo "Please provide a commit message"
		return 1
	fi

	git add .
	git commit -m "$1"
	git config --global --add --bool push.autoSetupRemote true
	git push
}
